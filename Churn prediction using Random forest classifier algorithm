import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve
import matplotlib
import matplotlib.pyplot as plt
from IPython.display import display,HTML
In [20]:
df = pd.read_excel("D:/sw/training/Churn.xls")
display(df.head(5))
Account Length	VMail Message	Day Mins	Eve Mins	Night Mins	Intl Mins	CustServ Calls	Churn	Int'l Plan	VMail Plan	...	Day Charge	Eve Calls	Eve Charge	Night Calls	Night Charge	Intl Calls	Intl Charge	State	Area Code	Phone
0	128	25	265.1	197.4	244.7	10.0	1	0	0	1	...	45.07	99	16.78	91	11.01	3	2.70	KS	415	382-4657
1	107	26	161.6	195.5	254.4	13.7	1	0	0	1	...	27.47	103	16.62	103	11.45	3	3.70	OH	415	371-7191
2	137	0	243.4	121.2	162.6	12.2	0	0	0	0	...	41.38	110	10.30	104	7.32	5	3.29	NJ	415	358-1921
3	84	0	299.4	61.9	196.9	6.6	2	0	1	0	...	50.90	88	5.26	89	8.86	7	1.78	OH	408	375-9999
4	75	0	166.7	148.3	186.9	10.1	3	0	1	0	...	28.34	122	12.61	121	8.41	3	2.73	OK	415	330-6626
5 rows Ã 21 columns

In [25]:
df = pd.read_excel("D:/sw/training/Churn.xls")
display(df.head(500))
Account Length	VMail Message	Day Mins	Eve Mins	Night Mins	Intl Mins	CustServ Calls	Churn	Int'l Plan	VMail Plan	...	Day Charge	Eve Calls	Eve Charge	Night Calls	Night Charge	Intl Calls	Intl Charge	State	Area Code	Phone
0	128	25	265.1	197.4	244.7	10.0	1	0	0	1	...	45.07	99	16.78	91	11.01	3	2.70	KS	415	382-4657
1	107	26	161.6	195.5	254.4	13.7	1	0	0	1	...	27.47	103	16.62	103	11.45	3	3.70	OH	415	371-7191
2	137	0	243.4	121.2	162.6	12.2	0	0	0	0	...	41.38	110	10.30	104	7.32	5	3.29	NJ	415	358-1921
3	84	0	299.4	61.9	196.9	6.6	2	0	1	0	...	50.90	88	5.26	89	8.86	7	1.78	OH	408	375-9999
4	75	0	166.7	148.3	186.9	10.1	3	0	1	0	...	28.34	122	12.61	121	8.41	3	2.73	OK	415	330-6626
5	118	0	223.4	220.6	203.9	6.3	0	0	1	0	...	37.98	101	18.75	118	9.18	6	1.70	AL	510	391-8027
6	121	24	218.2	348.5	212.6	7.5	3	0	0	1	...	37.09	108	29.62	118	9.57	7	2.03	MA	510	355-9993
7	147	0	157.0	103.1	211.8	7.1	0	0	1	0	...	26.69	94	8.76	96	9.53	6	1.92	MO	415	329-9001
8	117	0	184.5	351.6	215.8	8.7	1	0	0	0	...	31.37	80	29.89	90	9.71	4	2.35	LA	408	335-4719
9	141	37	258.6	222.0	326.4	11.2	0	0	1	1	...	43.96	111	18.87	97	14.69	5	3.02	WV	415	330-8173
10	65	0	129.1	228.5	208.8	12.7	4	1	0	0	...	21.95	83	19.42	111	9.40	6	3.43	IN	415	329-6603
11	74	0	187.7	163.4	196.0	9.1	0	0	0	0	...	31.91	148	13.89	94	8.82	5	2.46	RI	415	344-9403
12	168	0	128.8	104.9	141.1	11.2	1	0	0	0	...	21.90	71	8.92	128	6.35	2	3.02	IA	408	363-1107
13	95	0	156.6	247.6	192.3	12.3	3	0	0	0	...	26.62	75	21.05	115	8.65	5	3.32	MT	510	394-8006
14	62	0	120.7	307.2	203.0	13.1	4	0	0	0	...	20.52	76	26.11	99	9.14	6	3.54	IA	415	366-9238
15	161	0	332.9	317.8	160.6	5.4	4	1	0	0	...	56.59	97	27.01	128	7.23	9	1.46	NY	415	351-7269
16	85	27	196.4	280.9	89.3	13.8	1	0	0	1	...	33.39	90	23.88	75	4.02	4	3.73	ID	408	350-8884
17	93	0	190.7	218.2	129.6	8.1	3	0	0	0	...	32.42	111	18.55	121	5.83	3	2.19	VT	510	386-2923
18	76	33	189.7	212.8	165.7	10.0	1	0	0	1	...	32.25	65	18.09	108	7.46	5	2.70	VA	510	356-2992
19	73	0	224.4	159.5	192.8	13.0	1	0	0	0	...	38.15	88	13.56	74	8.68	2	3.51	TX	415	373-2782
20	147	0	155.1	239.7	208.8	10.6	0	0	0	0	...	26.37	93	20.37	133	9.40	4	2.86	FL	415	396-5800
21	77	0	62.4	169.9	209.6	5.7	5	1	0	0	...	10.61	121	14.44	64	9.43	6	1.54	CO	408	393-7984
22	130	0	183.0	72.9	181.8	9.5	0	0	0	0	...	31.11	99	6.20	78	8.18	19	2.57	AZ	415	358-1958
23	111	0	110.4	137.3	189.6	7.7	2	0	0	0	...	18.77	102	11.67	105	8.53	6	2.08	SC	415	350-2565
24	132	0	81.1	245.2	237.0	10.3	0	0	0	0	...	13.79	72	20.84	115	10.67	2	2.78	VA	510	343-4696
25	174	0	124.3	277.1	250.7	15.5	3	0	0	0	...	21.13	112	23.55	115	11.28	5	4.19	NE	415	331-3698
26	57	39	213.0	191.1	182.7	9.5	0	0	0	1	...	36.21	112	16.24	115	8.22	3	2.57	WY	408	357-3817
27	54	0	134.3	155.5	102.1	14.7	3	0	0	0	...	22.83	100	13.22	68	4.59	4	3.97	MT	408	418-6412
28	20	0	190.0	258.2	181.5	6.3	0	0	0	0	...	32.30	84	21.95	102	8.17	6	1.70	MO	415	353-2630
29	49	0	119.3	215.1	178.7	11.1	1	0	0	0	...	20.28	109	18.28	90	8.04	1	3.00	HI	510	410-7789
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
470	44	0	240.3	164.6	240.7	10.6	1	0	0	0	...	40.85	83	13.99	106	10.83	2	2.86	NE	415	416-8697
471	78	0	75.0	248.7	176.0	9.5	3	0	0	0	...	12.75	87	21.14	83	7.92	6	2.57	NV	408	345-3451
472	149	0	69.1	136.3	181.7	6.3	1	0	0	0	...	11.75	100	11.59	53	8.18	3	1.70	IL	408	379-2514
473	72	33	96.6	315.4	163.3	6.2	4	1	0	1	...	16.42	98	26.81	117	7.35	4	1.67	WV	510	418-6651
474	139	20	214.6	235.1	162.8	14.8	0	0	0	1	...	36.48	132	19.98	132	7.33	12	4.00	MI	415	421-3528
475	74	0	148.5	146.5	289.2	9.9	3	0	0	0	...	25.25	42	12.45	83	13.01	6	2.67	AR	510	329-9046
476	50	0	258.1	161.4	225.1	11.7	1	0	0	0	...	43.88	106	13.72	110	10.13	5	3.16	UT	510	406-3890
477	141	23	149.7	162.5	220.3	7.6	3	0	0	1	...	25.45	118	13.81	115	9.91	2	2.05	GA	510	403-8904
478	140	0	149.8	164.4	294.7	8.1	1	0	0	0	...	25.47	98	13.97	124	13.26	2	2.19	AZ	408	393-4086
479	99	0	190.4	158.1	271.5	11.2	2	0	0	0	...	32.37	107	13.44	92	12.22	4	3.02	ID	408	400-1367
480	166	0	181.4	253.8	112.3	11.6	1	0	0	0	...	30.84	54	21.57	94	5.05	6	3.13	HI	408	377-9473
481	124	0	151.1	187.4	255.4	5.3	1	0	0	0	...	25.69	104	15.93	93	11.49	3	1.43	NV	408	396-3068
482	74	0	155.7	173.7	257.4	8.1	0	0	0	0	...	26.47	63	14.76	97	11.58	4	2.19	MD	415	331-9293
483	117	0	149.9	256.1	212.7	13.3	2	0	0	0	...	25.48	110	21.77	92	9.57	13	3.59	GA	510	347-1914
484	85	0	222.3	231.5	223.5	11.0	3	0	0	0	...	37.79	101	19.68	75	10.06	2	2.97	GA	510	395-1962
485	36	16	149.4	131.8	132.7	6.7	0	0	0	1	...	25.40	113	11.20	87	5.97	2	1.81	UT	415	401-5485
486	102	0	233.8	221.6	146.9	12.8	0	0	1	0	...	39.75	131	18.84	106	6.61	3	3.46	MA	510	355-6560
487	76	0	204.2	292.6	244.3	10.5	0	0	0	0	...	34.71	139	24.87	105	10.99	2	2.84	IN	415	363-3911
488	165	0	242.9	209.8	228.4	0.0	1	0	0	0	...	41.29	65	17.83	126	10.28	0	0.00	VT	510	345-1998
489	130	0	150.4	230.5	186.3	12.3	1	0	0	0	...	25.57	99	19.59	76	8.38	4	3.32	IA	415	361-5277
490	78	0	208.9	252.4	280.2	12.8	0	0	0	0	...	35.51	132	21.45	120	12.61	7	3.46	IN	415	376-7145
491	55	0	191.9	256.1	203.7	14.3	1	1	1	0	...	32.62	110	21.77	101	9.17	6	3.86	AL	415	375-2975
492	92	0	130.7	260.6	244.2	9.4	2	1	1	0	...	22.22	122	22.15	98	10.99	2	2.54	ME	415	376-8573
493	129	33	119.6	278.7	263.4	5.9	2	0	0	1	...	20.33	88	23.69	175	11.85	2	1.59	RI	415	366-7360
494	18	0	273.6	114.6	250.6	8.2	1	0	0	0	...	46.51	116	9.74	120	11.28	4	2.21	MD	408	347-7898
495	161	0	156.1	180.3	179.6	11.1	2	0	1	0	...	26.54	63	15.33	115	8.08	9	3.00	FL	415	390-7328
496	93	36	178.7	178.6	126.8	8.0	2	0	0	1	...	30.38	102	15.18	82	5.71	4	2.16	CA	415	356-5491
497	144	0	177.5	287.4	180.5	11.9	2	0	0	0	...	30.18	75	24.43	118	8.12	3	3.21	AL	415	373-3251
498	75	0	211.3	105.6	175.9	9.7	4	1	1	0	...	35.92	119	8.98	63	7.92	4	2.62	ME	408	343-1965
499	95	0	175.2	244.4	75.8	7.5	1	0	0	0	...	29.78	109	20.77	95	3.41	2	2.03	WV	415	378-8019
500 rows Ã 21 columns

In [21]:
df.describe()
Out[21]:
Account Length	VMail Message	Day Mins	Eve Mins	Night Mins	Intl Mins	CustServ Calls	Churn	Int'l Plan	VMail Plan	Day Calls	Day Charge	Eve Calls	Eve Charge	Night Calls	Night Charge	Intl Calls	Intl Charge	Area Code
count	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000	3333.000000
mean	101.064806	8.099010	179.775098	200.980348	200.872037	10.237294	1.562856	0.144914	0.096910	0.276628	100.435644	30.562307	100.114311	17.083540	100.107711	9.039325	4.479448	2.764581	437.182418
std	39.822106	13.688365	54.467389	50.713844	50.573847	2.791840	1.315491	0.352067	0.295879	0.447398	20.069084	9.259435	19.922625	4.310668	19.568609	2.275873	2.461214	0.753773	42.371290
min	1.000000	0.000000	0.000000	0.000000	23.200000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	33.000000	1.040000	0.000000	0.000000	408.000000
25%	74.000000	0.000000	143.700000	166.600000	167.000000	8.500000	1.000000	0.000000	0.000000	0.000000	87.000000	24.430000	87.000000	14.160000	87.000000	7.520000	3.000000	2.300000	408.000000
50%	101.000000	0.000000	179.400000	201.400000	201.200000	10.300000	1.000000	0.000000	0.000000	0.000000	101.000000	30.500000	100.000000	17.120000	100.000000	9.050000	4.000000	2.780000	415.000000
75%	127.000000	20.000000	216.400000	235.300000	235.300000	12.100000	2.000000	0.000000	0.000000	1.000000	114.000000	36.790000	114.000000	20.000000	113.000000	10.590000	6.000000	3.270000	510.000000
max	243.000000	51.000000	350.800000	363.700000	395.000000	20.000000	9.000000	1.000000	1.000000	1.000000	165.000000	59.640000	170.000000	30.910000	175.000000	17.770000	20.000000	5.400000	510.000000
In [23]:
df.dtypes
Out[23]:
Account Length      int64
VMail Message       int64
Day Mins          float64
Eve Mins          float64
Night Mins        float64
Intl Mins         float64
CustServ Calls      int64
Churn               int64
Int'l Plan          int64
VMail Plan          int64
Day Calls           int64
Day Charge        float64
Eve Calls           int64
Eve Charge        float64
Night Calls         int64
Night Charge      float64
Intl Calls          int64
Intl Charge       float64
State              object
Area Code           int64
Phone              object
dtype: object
In [24]:
df = df.drop(["Phone", "Area Code", "State"], axis=1)
features = df.drop(["Churn"], axis=1).columns
In [26]:
df_train, df_test = train_test_split(df, test_size=0.25)
In [28]:
#Set up our RandomForestClassifier instance and fit to data
clf = RandomForestClassifier(max_depth = 10, min_samples_split=2, n_estimators = 100, random_state =1)

#construct a forest

clf.fit(df_train[features], df_train["Churn"])

#Make predictions

predictions = clf.predict(df_test[features])
probs = clf.predict_proba(df_test[features])
display(predictions)
array([0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
       0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,
       0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
       0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
       1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
      dtype=int64)
In [30]:
from sklearn import metrics

print('Accuracy:' , metrics.accuracy_score(df_test["Churn"], predictions))

print(metrics.classification_report(df_test["Churn"], predictions))
print(metrics.confusion_matrix(df_test["Churn"], predictions))
Accuracy: 0.9520383693045563
             precision    recall  f1-score   support

          0       0.95      0.99      0.97       723
          1       0.94      0.68      0.79       111

avg / total       0.95      0.95      0.95       834

[[718   5]
 [ 35  76]]
In [32]:
get_ipython().magic('matplotlib inline')
confusion_matrix = pd.DataFrame(
    confusion_matrix(df_test["Churn"], predictions), 
    columns=["Predicted False", "Predicted True"], 
    index=["Actual False", "Actual True"]
)
display(confusion_matrix)

# Calculate the fpr and tpr for all thresholds of the classification
fpr, tpr, threshold = roc_curve(df_test["Churn"], probs[:,1])
plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
Predicted False	Predicted True
Actual False	718	5
Actual True	35	76
